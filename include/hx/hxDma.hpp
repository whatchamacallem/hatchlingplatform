#pragma once
// Copyright 2017-2025 Adrian Johnston

#include <hx/hatchling.h>

// Internally profiling and validating DMA API. This code is intended to be
// customized for your platform. If HX_PROFILE != 0 then hxdma_start(),
// hxdma_await_sync_point() and hxdma_await_all() calls generate descriptive labels.

// Used to marks a point in time so that preceding DMA operations can be waited for.
struct hxdma_sync_point {
#if HX_DEBUG_DMA
	// A synchronization point must be set with hxdma_add_sync_point() before use.
	hxdma_sync_point() : debug_only(~(size_t)0u), p_impl(hxnull) { }
	size_t debug_only;
#else
	hxdma_sync_point() : p_impl(hxnull) { }
#endif
	// TODO: Configure for target. Use p_impl to store a target specific handle.
	char* p_impl;
};

// Acquires and initializes resources required for DMA. Called by hxinit().
void hxdma_init();

// Waits for all DMA and invalidates all synchronization points. Must be called
// intermittently when HX_DEBUG_DMA != 0 to recycle resources.
void hxdma_end_frame();

// Marks a point in time so that preceding DMA operations can be waited for using
// sync_point.
void hxdma_add_sync_point(hxdma_sync_point& sync_point_);

#if HX_PROFILE
// Initiates a DMA transfer from src to dst of bytes length. label_string_literal,
// if non-null, is used in profiling and debug diagnostic messages.
#define hxdma_start(dst_, src_, bytes_, label_string_literal_) \
	hxdma_start_labeled(dst_, src_, bytes_, label_string_literal_)

// Waits until all DMA proceeding the corresponding call to hxdma_add_sync_point()
// is completed. label_string_literal, if non-null, is used in a profiler record
// generated by this event and in profiling and debug diagnostic messages.
#define hxdma_await_sync_point(sync_point_, label_string_literal_) \
	hxdma_await_sync_point_labeled(sync_point_, label_string_literal_)

// Waits until all DMA is completed. label_string_literal, if non-null, is used
// in a profiler record generated by this event and in debug diagnostic messages.
#define hxdma_await_all(label_string_literal_) hxdma_await_all_labeled(label_string_literal_)

#else // !HX_PROFILE

#define hxdma_start(dst_, src_, bytes_, label_string_literal_) hxdma_start_labeled(dst_, src_, bytes_, hxnull)
#define hxdma_await_sync_point(sync_point_, label_string_literal_) hxdma_await_sync_point_labeled(sync_point_, hxnull)
#define hxdma_await_all(label_string_literal_) hxdma_await_all_labeled(hxnull)
#endif

// Use hxdma_start to compile out label_string_literal when not profiling.
void hxdma_start_labeled(void* dst_, const void* src_, size_t bytes_, const char* label_string_literal_);

// Use hxdma_await_sync_point to compile out label_string_literal when not profiling.
void hxdma_await_sync_point_labeled(hxdma_sync_point& sync_point_, const char* label_string_literal_);

// Use hxdma_await_all to compile out label_string_literal when not profiling.
void hxdma_await_all_labeled(const char* label_string_literal_);
